import { SlashCommandBuilder, ChannelType, PermissionsBitField, EmbedBuilder, ButtonBuilder, 
  ButtonStyle, ActionRowBuilder, ModalBuilder, TextInputBuilder, TextInputStyle } from "discord.js";
import { getJSONData } from "../../utils.js";
import VoiceController from "../../controller/VoiceController.js";
import UserController from "../../controller/UserController.js";

export default {
  data: new SlashCommandBuilder()
    .setName("voice")
    .setDescription("–î–µ–π—Å—Ç–≤–∏—è —Å –ø—Ä–∏–≤–∞—Ç–Ω—ã–º –≥–æ–ª–æ—Å–æ–≤—ã–º –∫–∞–Ω–∞–ª–æ–º")
    .addSubcommand(subCommand => 
      subCommand.setName("buy")
        .setDescription("–ü–æ–∫—É–ø–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞")
        .addStringOption(option =>
          option.setName("name")
            .setDescription("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞")
            .setRequired(true)
            .setMinLength(1)
            .setMaxLength(20)
        )
    )
    .addSubcommand(subCommand => 
      subCommand.setName("configure")
        .setDescription("–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–≤–æ–π –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª")
    ),

  async execute(interaction) {
    const subCommand = interaction.options.getSubcommand();
    const everyoneRole = interaction.guild.roles.everyone.id;
    const isRoomExists = await VoiceController.isRoomExists(interaction.user.id).catch(err => { console.error(err.message) });

    switch(subCommand) {
      case "buy": {
        try {
          const { voiceChannelsCategoryId, privateChannelPrice } = getJSONData("globalVariables.json");
          const channelName = interaction.options.getString("name");
          
          if(isRoomExists) {
            return await interaction.reply({ content: "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã", ephemeral: true });
          }

          const balance = await UserController.getBalanceById(interaction.user.id);
          if(balance < privateChannelPrice) {
            return await interaction.reply({ content: "–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫–æ–º–Ω–∞—Ç—ã", ephemeral: true });
          }
          
          const newChannel = await interaction.guild.channels.create({
            name: channelName,
            type: ChannelType.GuildVoice,
            parent: voiceChannelsCategoryId,
            permissionOverwrites: [
              {
                id: everyoneRole,
                deny: [PermissionsBitField.Flags.ViewChannel, PermissionsBitField.Flags.Connect]
              },
              {
                id: interaction.user.id,
                allow: [PermissionsBitField.Flags.ViewChannel, PermissionsBitField.Flags.Connect]
              }
            ]
          });

          await VoiceController.create(interaction.user.id, newChannel?.id);
          await UserController.updateBalanceById(interaction.user.id, privateChannelPrice, "decrement");

          return await interaction.reply({ 
            content: `–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ –∫–∞–Ω–∞–ª <#${newChannel.id}>. –û–Ω –¥–æ–±–∞–≤–∏–ª—Å—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: <#${voiceChannelsCategoryId}>`,
            ephemeral: true
          });
        } catch(err) {
          console.error("Error in voice command(buy):", err.message);
        }
      }

      case "configure": {
        try {
          const productButtons = [
            { name: "–ü–µ—Ä–µ–∏–º–∏–Ω–æ–≤–∞—Ç—å", emoji: "üñä" },
            { name: "–°–∫—Ä—ã—Ç—å", emoji: "üîê" },
            { name: "–ü–æ–∫–∞–∑–∞—Ç—å", emoji: "üîë" },
            { name: "–£–¥–∞–ª–∏—Ç—å", emoji: "‚ùå" }
          ];

          const userButtons = [
            { name: "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", emoji: "ü§µ" },
            { name: "–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", emoji: "üß¶" },
            { name: "–õ–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", emoji: "üé∞" },
          ];
          
          if(!isRoomExists) {
            return await interaction.reply({ content: "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à–∏—Ö –∫–æ–º–Ω–∞—Ç", ephemeral: true });
          }
          
          const { voiceId } = await VoiceController.getOne(interaction.user.id);

          const targetChannel = await interaction.guild.channels.fetch(voiceId);
          if(!targetChannel) {
            return await interaction.reply({ content: "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ", ephemeral: true });
          }

          const embed = new EmbedBuilder()
            .setTitle("–ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è –∫–æ–º–Ω–∞—Ç—ã")
            .setDescription(`–ö–∞—Å—Ç–æ–º–∏–∑–∏—Ä—É–π—Ç–µ —Å–≤–æ—é –∫–æ–º–Ω–∞—Ç—É <#${voiceId}>`)
            .setColor(2829617)

          const roomCustomizationButtons = productButtons.map(({ name, emoji }) => {
            return new ButtonBuilder()
              .setCustomId(name)
              .setLabel(name)
              .setStyle(ButtonStyle.Secondary)
              .setEmoji(emoji)
          });

          const userInteractionButtons = userButtons.map(({ name, emoji }) => {
            return new ButtonBuilder()
              .setCustomId(name)
              .setLabel(name)
              .setStyle(ButtonStyle.Secondary)
              .setEmoji(emoji)
          });

          const roomCustomizationRow = new ActionRowBuilder().addComponents(roomCustomizationButtons);
          const userInteractionRow = new ActionRowBuilder().addComponents(userInteractionButtons);

          const reply = await interaction.reply({ embeds: [embed], components: [roomCustomizationRow, userInteractionRow], ephemeral: true });
          const collector = reply.createMessageComponentCollector({ filter: (i) => i.user.id === interaction.user.id });

          collector.on("collect", async(buttonInteraction) => {
            const { customId } = buttonInteraction;

            const channel = await interaction.guild.channels.fetch(voiceId);
            if(!channel) {
              return await interaction.reply({ content: "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ", ephemeral: true }); 
            }

            const labels = { 
              "–ü–µ—Ä–µ–∏–º–∏–Ω–æ–≤–∞—Ç—å": "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞",
              "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è": "–ù–∞–ø–∏—à–∏—Ç–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
              "–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è": "–ù–∞–ø–∏—à–∏—Ç–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
              "–õ–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π": "–ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ(1 - 99)"
            };

            const modal = new ModalBuilder({
              customId: `modal-${interaction.user.id}`,
              title: customId
            });

            const fieldInput = new TextInputBuilder({
              customId: "field",
              label: labels[customId],
              style: TextInputStyle.Short,
              minLength: 1,
              maxLength: 30
            });

            const actionRow = new ActionRowBuilder().addComponents(fieldInput);
            modal.addComponents(actionRow);

            const filter = (i) => i.user.id === buttonInteraction.user.id;
            const interactionTime = 3600 * 1000;

            try {
              switch(customId) {
                case "–ü–µ—Ä–µ–∏–º–∏–Ω–æ–≤–∞—Ç—å": {
                  await buttonInteraction.showModal(modal);
                  await buttonInteraction
                    .awaitModalSubmit({ filter, time: interactionTime })
                    .then(async(modalInteraction) => {
                      const newChannelName = modalInteraction.fields.getTextInputValue("field");
                      targetChannel.setName(newChannelName);
  
                      await modalInteraction.reply({ content: `–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ **${newChannelName}**`, ephemeral: true }); 
                    });
                  break;
                }

                case "–°–∫—Ä—ã—Ç—å": {
                  await targetChannel.permissionOverwrites
                    .edit(everyoneRole, { ViewChannel: false })
                    .catch();

                  return await buttonInteraction.reply({ content: "–í—ã —É—Å–ø–µ—à–Ω–æ —Å–∫—Ä—ã–ª–∏ –∫–∞–Ω–∞–ª", ephemeral: true });
                }

                case "–ü–æ–∫–∞–∑–∞—Ç—å": {
                  await targetChannel.permissionOverwrites
                    .edit(everyoneRole, { ViewChannel: true })
                    .catch();

                  return await buttonInteraction.reply({ content: "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∞–∑–∞–ª–∏ –∫–∞–Ω–∞–ª", ephemeral: true });
                }

                case "–£–¥–∞–ª–∏—Ç—å": {
                  targetChannel.delete();
                  await VoiceController.deleteOne(interaction.user.id);

                  embed
                    .setTitle("–ö–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω")
                    .setDescription("–í—ã –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —ç—Ç–∏–º –∫–∞–Ω–∞–ª–æ–º —Ç–∞–∫ –∫–∞–∫ –æ–Ω —É–¥–∞–ª–µ–Ω")
                  
                  await interaction.editReply({ embeds: [embed], components: [], ephemeral: true }); 
                  return await buttonInteraction.reply({ content: "–í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ —Å–≤–æ–π –∫–∞–Ω–∞–ª", ephemeral: true });
                }

                case "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è": {
                  await buttonInteraction.showModal(modal);
                  await buttonInteraction
                    .awaitModalSubmit({ filter, time: interactionTime })
                    .then(async(modalInteraction) => {
                      await handleUserAction(modalInteraction, targetChannel, true);
                    });
                  break;
                }

                case "–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è": {
                  await buttonInteraction.showModal(modal);
                  await buttonInteraction
                    .awaitModalSubmit({ filter, time: interactionTime })
                    .then(async(modalInteraction) => {
                      await handleUserAction(modalInteraction, targetChannel, false);
                    });
                  break;
                }

                case "–õ–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π": {
                  await buttonInteraction.showModal(modal);
                  await buttonInteraction
                    .awaitModalSubmit({ filter, time: interactionTime })
                    .then(async(modalInteraction) => {
                      const newUserLimit = modalInteraction.fields.getTextInputValue("field");
                      const userLimitRegex = /^(?:[1-9]|[1-9][0-9])$/;

                      if(!userLimitRegex.test(newUserLimit)) {
                        return await modalInteraction.reply({ content: "–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª–∏–¥–Ω–æ–µ —á–∏—Å–ª–æ(1 - 99)", ephemeral: true });
                      }

                      await targetChannel.setUserLimit(newUserLimit);
                      await modalInteraction.reply({ 
                        content: `–õ–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ${targetChannel} –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ **${newUserLimit}**`,
                        ephemeral: true
                      });
                    })
                  break;
                }
              }
            } catch(err) {
              console.error("Error in voice configure(button interaction):", err.message);
            }
          });

          break;
        } catch(err) {
          console.log("Error in voice command(configure):", err.message)
        }
      }
    }
  }
}

async function handleUserAction(modalInteraction, targetChannel, allowAccess) {
  const userId = modalInteraction.fields.getTextInputValue("field");
  const discordIdRegex = /(\d{17,19})/;

  if (!discordIdRegex.test(userId)) {
    return await modalInteraction.reply({
      content: "–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª–∏–¥–Ω–æ–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
      ephemeral: true,
    });
  }

  const specifiedUser = await modalInteraction.guild.members.fetch(userId);
  if (!specifiedUser) {
    return await modalInteraction.reply({
      content: `<@${userId}> –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ`,
      ephemeral: true,
    });
  }

  await targetChannel.permissionOverwrites
    .edit(specifiedUser, { ViewChannel: allowAccess, Connect: allowAccess })
    .catch();

  const actionText = allowAccess ? "–¥–æ–±–∞–≤–ª–µ–Ω" : "—É–¥–∞–ª–µ–Ω";
  return await modalInteraction.reply({
    content: `<@${userId}> —É—Å–ø–µ—à–Ω–æ ${actionText} –∏–∑ –∫–∞–Ω–∞–ª–∞`,
    ephemeral: true,
  });
};